// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/query/v1beta1/account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { BasicPool, FullStaker } from "./query";

export const protobufPackage = "kyve.query.v1beta1";

/** QueryAccountAssetsRequest is the request type for the Query/AccountAssets RPC method. */
export interface QueryAccountAssetsRequest {
  /** address ... */
  address: string;
}

/** QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method. */
export interface QueryAccountAssetsResponse {
  /** balance ... */
  balance: string;
  /** delegation is the amount in $KYVE this account has in total delegated ... */
  delegation: string;
  /** delegation_unbonding is the amount in $KYVE this account has in total currently unbonding ... */
  delegation_unbonding: string;
  /** delegation_rewards are the current unclaimed delegation rewards */
  delegation_rewards: Coin[];
  /** commission_rewards are the current unclaimed commission rewards */
  commission_rewards: Coin[];
  /** protocol_funding ... */
  protocol_funding: Coin[];
}

/** QueryAccountFundedListRequest ... */
export interface QueryAccountDelegationUnbondingsRequest {
  /** pagination defines an optional pagination for the request. */
  pagination?:
    | PageRequest
    | undefined;
  /** address ... */
  address: string;
}

/** QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method. */
export interface QueryAccountDelegationUnbondingsResponse {
  /** balance ... */
  unbondings: DelegationUnbonding[];
  /** pagination defines the pagination in the response. */
  pagination?: PageResponse | undefined;
}

/** QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method. */
export interface DelegationUnbonding {
  /** amount */
  amount: string;
  /** creation_time */
  creation_time: string;
  /** staker */
  staker?: FullStaker | undefined;
}

/** QueryAccountFundedListRequest is the request type for the account queries with pagination */
export interface QueryAccountFundedListRequest {
  /** address ... */
  address: string;
}

/** QueryAccountFundedListResponse is the response type for the Query/AccountFundedList RPC method. */
export interface QueryAccountFundedListResponse {
  /** funded ... */
  funded: Funded[];
}

/** Funded ... */
export interface Funded {
  /** amounts ... */
  amounts: Coin[];
  /** pool ... */
  pool?: BasicPool | undefined;
}

/** QueryAccountDelegationListRequest ... */
export interface QueryAccountRedelegationRequest {
  /** address ... */
  address: string;
}

/** QueryAccountDelegationListRequest is the response type for the Query/AccountDelegationList RPC method. */
export interface QueryAccountRedelegationResponse {
  /** redelegation_cooldown_entries ... */
  redelegation_cooldown_entries: RedelegationEntry[];
  /** availableSlots ... */
  available_slots: string;
}

/** RedelegationEntry ... */
export interface RedelegationEntry {
  /** creation_date ... */
  creation_date: string;
  /** finish_date ... */
  finish_date: string;
}

function createBaseQueryAccountAssetsRequest(): QueryAccountAssetsRequest {
  return { address: "" };
}

export const QueryAccountAssetsRequest: MessageFns<QueryAccountAssetsRequest> = {
  encode(message: QueryAccountAssetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountAssetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountAssetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountAssetsRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryAccountAssetsRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountAssetsRequest>, I>>(base?: I): QueryAccountAssetsRequest {
    return QueryAccountAssetsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountAssetsRequest>, I>>(object: I): QueryAccountAssetsRequest {
    const message = createBaseQueryAccountAssetsRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryAccountAssetsResponse(): QueryAccountAssetsResponse {
  return {
    balance: "0",
    delegation: "0",
    delegation_unbonding: "0",
    delegation_rewards: [],
    commission_rewards: [],
    protocol_funding: [],
  };
}

export const QueryAccountAssetsResponse: MessageFns<QueryAccountAssetsResponse> = {
  encode(message: QueryAccountAssetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.balance !== "0") {
      writer.uint32(8).uint64(message.balance);
    }
    if (message.delegation !== "0") {
      writer.uint32(16).uint64(message.delegation);
    }
    if (message.delegation_unbonding !== "0") {
      writer.uint32(24).uint64(message.delegation_unbonding);
    }
    for (const v of message.delegation_rewards) {
      Coin.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.commission_rewards) {
      Coin.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.protocol_funding) {
      Coin.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountAssetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountAssetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.balance = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.delegation = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.delegation_unbonding = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.delegation_rewards.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.commission_rewards.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.protocol_funding.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountAssetsResponse {
    return {
      balance: isSet(object.balance) ? globalThis.String(object.balance) : "0",
      delegation: isSet(object.delegation) ? globalThis.String(object.delegation) : "0",
      delegation_unbonding: isSet(object.delegation_unbonding) ? globalThis.String(object.delegation_unbonding) : "0",
      delegation_rewards: globalThis.Array.isArray(object?.delegation_rewards)
        ? object.delegation_rewards.map((e: any) => Coin.fromJSON(e))
        : [],
      commission_rewards: globalThis.Array.isArray(object?.commission_rewards)
        ? object.commission_rewards.map((e: any) => Coin.fromJSON(e))
        : [],
      protocol_funding: globalThis.Array.isArray(object?.protocol_funding)
        ? object.protocol_funding.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryAccountAssetsResponse): unknown {
    const obj: any = {};
    if (message.balance !== "0") {
      obj.balance = message.balance;
    }
    if (message.delegation !== "0") {
      obj.delegation = message.delegation;
    }
    if (message.delegation_unbonding !== "0") {
      obj.delegation_unbonding = message.delegation_unbonding;
    }
    if (message.delegation_rewards?.length) {
      obj.delegation_rewards = message.delegation_rewards.map((e) => Coin.toJSON(e));
    }
    if (message.commission_rewards?.length) {
      obj.commission_rewards = message.commission_rewards.map((e) => Coin.toJSON(e));
    }
    if (message.protocol_funding?.length) {
      obj.protocol_funding = message.protocol_funding.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountAssetsResponse>, I>>(base?: I): QueryAccountAssetsResponse {
    return QueryAccountAssetsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountAssetsResponse>, I>>(object: I): QueryAccountAssetsResponse {
    const message = createBaseQueryAccountAssetsResponse();
    message.balance = object.balance ?? "0";
    message.delegation = object.delegation ?? "0";
    message.delegation_unbonding = object.delegation_unbonding ?? "0";
    message.delegation_rewards = object.delegation_rewards?.map((e) => Coin.fromPartial(e)) || [];
    message.commission_rewards = object.commission_rewards?.map((e) => Coin.fromPartial(e)) || [];
    message.protocol_funding = object.protocol_funding?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryAccountDelegationUnbondingsRequest(): QueryAccountDelegationUnbondingsRequest {
  return { pagination: undefined, address: "" };
}

export const QueryAccountDelegationUnbondingsRequest: MessageFns<QueryAccountDelegationUnbondingsRequest> = {
  encode(message: QueryAccountDelegationUnbondingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountDelegationUnbondingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountDelegationUnbondingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountDelegationUnbondingsRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: QueryAccountDelegationUnbondingsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountDelegationUnbondingsRequest>, I>>(
    base?: I,
  ): QueryAccountDelegationUnbondingsRequest {
    return QueryAccountDelegationUnbondingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountDelegationUnbondingsRequest>, I>>(
    object: I,
  ): QueryAccountDelegationUnbondingsRequest {
    const message = createBaseQueryAccountDelegationUnbondingsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryAccountDelegationUnbondingsResponse(): QueryAccountDelegationUnbondingsResponse {
  return { unbondings: [], pagination: undefined };
}

export const QueryAccountDelegationUnbondingsResponse: MessageFns<QueryAccountDelegationUnbondingsResponse> = {
  encode(message: QueryAccountDelegationUnbondingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.unbondings) {
      DelegationUnbonding.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountDelegationUnbondingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountDelegationUnbondingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondings.push(DelegationUnbonding.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountDelegationUnbondingsResponse {
    return {
      unbondings: globalThis.Array.isArray(object?.unbondings)
        ? object.unbondings.map((e: any) => DelegationUnbonding.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAccountDelegationUnbondingsResponse): unknown {
    const obj: any = {};
    if (message.unbondings?.length) {
      obj.unbondings = message.unbondings.map((e) => DelegationUnbonding.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountDelegationUnbondingsResponse>, I>>(
    base?: I,
  ): QueryAccountDelegationUnbondingsResponse {
    return QueryAccountDelegationUnbondingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountDelegationUnbondingsResponse>, I>>(
    object: I,
  ): QueryAccountDelegationUnbondingsResponse {
    const message = createBaseQueryAccountDelegationUnbondingsResponse();
    message.unbondings = object.unbondings?.map((e) => DelegationUnbonding.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseDelegationUnbonding(): DelegationUnbonding {
  return { amount: "0", creation_time: "0", staker: undefined };
}

export const DelegationUnbonding: MessageFns<DelegationUnbonding> = {
  encode(message: DelegationUnbonding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "0") {
      writer.uint32(8).uint64(message.amount);
    }
    if (message.creation_time !== "0") {
      writer.uint32(16).uint64(message.creation_time);
    }
    if (message.staker !== undefined) {
      FullStaker.encode(message.staker, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DelegationUnbonding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegationUnbonding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.amount = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.creation_time = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.staker = FullStaker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegationUnbonding {
    return {
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "0",
      creation_time: isSet(object.creation_time) ? globalThis.String(object.creation_time) : "0",
      staker: isSet(object.staker) ? FullStaker.fromJSON(object.staker) : undefined,
    };
  },

  toJSON(message: DelegationUnbonding): unknown {
    const obj: any = {};
    if (message.amount !== "0") {
      obj.amount = message.amount;
    }
    if (message.creation_time !== "0") {
      obj.creation_time = message.creation_time;
    }
    if (message.staker !== undefined) {
      obj.staker = FullStaker.toJSON(message.staker);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DelegationUnbonding>, I>>(base?: I): DelegationUnbonding {
    return DelegationUnbonding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DelegationUnbonding>, I>>(object: I): DelegationUnbonding {
    const message = createBaseDelegationUnbonding();
    message.amount = object.amount ?? "0";
    message.creation_time = object.creation_time ?? "0";
    message.staker = (object.staker !== undefined && object.staker !== null)
      ? FullStaker.fromPartial(object.staker)
      : undefined;
    return message;
  },
};

function createBaseQueryAccountFundedListRequest(): QueryAccountFundedListRequest {
  return { address: "" };
}

export const QueryAccountFundedListRequest: MessageFns<QueryAccountFundedListRequest> = {
  encode(message: QueryAccountFundedListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountFundedListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountFundedListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountFundedListRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryAccountFundedListRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountFundedListRequest>, I>>(base?: I): QueryAccountFundedListRequest {
    return QueryAccountFundedListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountFundedListRequest>, I>>(
    object: I,
  ): QueryAccountFundedListRequest {
    const message = createBaseQueryAccountFundedListRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryAccountFundedListResponse(): QueryAccountFundedListResponse {
  return { funded: [] };
}

export const QueryAccountFundedListResponse: MessageFns<QueryAccountFundedListResponse> = {
  encode(message: QueryAccountFundedListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.funded) {
      Funded.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountFundedListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountFundedListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.funded.push(Funded.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountFundedListResponse {
    return {
      funded: globalThis.Array.isArray(object?.funded) ? object.funded.map((e: any) => Funded.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryAccountFundedListResponse): unknown {
    const obj: any = {};
    if (message.funded?.length) {
      obj.funded = message.funded.map((e) => Funded.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountFundedListResponse>, I>>(base?: I): QueryAccountFundedListResponse {
    return QueryAccountFundedListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountFundedListResponse>, I>>(
    object: I,
  ): QueryAccountFundedListResponse {
    const message = createBaseQueryAccountFundedListResponse();
    message.funded = object.funded?.map((e) => Funded.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFunded(): Funded {
  return { amounts: [], pool: undefined };
}

export const Funded: MessageFns<Funded> = {
  encode(message: Funded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.amounts) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.pool !== undefined) {
      BasicPool.encode(message.pool, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Funded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amounts.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pool = BasicPool.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Funded {
    return {
      amounts: globalThis.Array.isArray(object?.amounts) ? object.amounts.map((e: any) => Coin.fromJSON(e)) : [],
      pool: isSet(object.pool) ? BasicPool.fromJSON(object.pool) : undefined,
    };
  },

  toJSON(message: Funded): unknown {
    const obj: any = {};
    if (message.amounts?.length) {
      obj.amounts = message.amounts.map((e) => Coin.toJSON(e));
    }
    if (message.pool !== undefined) {
      obj.pool = BasicPool.toJSON(message.pool);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Funded>, I>>(base?: I): Funded {
    return Funded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Funded>, I>>(object: I): Funded {
    const message = createBaseFunded();
    message.amounts = object.amounts?.map((e) => Coin.fromPartial(e)) || [];
    message.pool = (object.pool !== undefined && object.pool !== null) ? BasicPool.fromPartial(object.pool) : undefined;
    return message;
  },
};

function createBaseQueryAccountRedelegationRequest(): QueryAccountRedelegationRequest {
  return { address: "" };
}

export const QueryAccountRedelegationRequest: MessageFns<QueryAccountRedelegationRequest> = {
  encode(message: QueryAccountRedelegationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountRedelegationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountRedelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountRedelegationRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryAccountRedelegationRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountRedelegationRequest>, I>>(base?: I): QueryAccountRedelegationRequest {
    return QueryAccountRedelegationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountRedelegationRequest>, I>>(
    object: I,
  ): QueryAccountRedelegationRequest {
    const message = createBaseQueryAccountRedelegationRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryAccountRedelegationResponse(): QueryAccountRedelegationResponse {
  return { redelegation_cooldown_entries: [], available_slots: "0" };
}

export const QueryAccountRedelegationResponse: MessageFns<QueryAccountRedelegationResponse> = {
  encode(message: QueryAccountRedelegationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.redelegation_cooldown_entries) {
      RedelegationEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.available_slots !== "0") {
      writer.uint32(16).uint64(message.available_slots);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAccountRedelegationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountRedelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.redelegation_cooldown_entries.push(RedelegationEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.available_slots = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAccountRedelegationResponse {
    return {
      redelegation_cooldown_entries: globalThis.Array.isArray(object?.redelegation_cooldown_entries)
        ? object.redelegation_cooldown_entries.map((e: any) => RedelegationEntry.fromJSON(e))
        : [],
      available_slots: isSet(object.available_slots) ? globalThis.String(object.available_slots) : "0",
    };
  },

  toJSON(message: QueryAccountRedelegationResponse): unknown {
    const obj: any = {};
    if (message.redelegation_cooldown_entries?.length) {
      obj.redelegation_cooldown_entries = message.redelegation_cooldown_entries.map((e) => RedelegationEntry.toJSON(e));
    }
    if (message.available_slots !== "0") {
      obj.available_slots = message.available_slots;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAccountRedelegationResponse>, I>>(
    base?: I,
  ): QueryAccountRedelegationResponse {
    return QueryAccountRedelegationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAccountRedelegationResponse>, I>>(
    object: I,
  ): QueryAccountRedelegationResponse {
    const message = createBaseQueryAccountRedelegationResponse();
    message.redelegation_cooldown_entries =
      object.redelegation_cooldown_entries?.map((e) => RedelegationEntry.fromPartial(e)) || [];
    message.available_slots = object.available_slots ?? "0";
    return message;
  },
};

function createBaseRedelegationEntry(): RedelegationEntry {
  return { creation_date: "0", finish_date: "0" };
}

export const RedelegationEntry: MessageFns<RedelegationEntry> = {
  encode(message: RedelegationEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creation_date !== "0") {
      writer.uint32(8).uint64(message.creation_date);
    }
    if (message.finish_date !== "0") {
      writer.uint32(16).uint64(message.finish_date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RedelegationEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedelegationEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.creation_date = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.finish_date = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedelegationEntry {
    return {
      creation_date: isSet(object.creation_date) ? globalThis.String(object.creation_date) : "0",
      finish_date: isSet(object.finish_date) ? globalThis.String(object.finish_date) : "0",
    };
  },

  toJSON(message: RedelegationEntry): unknown {
    const obj: any = {};
    if (message.creation_date !== "0") {
      obj.creation_date = message.creation_date;
    }
    if (message.finish_date !== "0") {
      obj.finish_date = message.finish_date;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedelegationEntry>, I>>(base?: I): RedelegationEntry {
    return RedelegationEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedelegationEntry>, I>>(object: I): RedelegationEntry {
    const message = createBaseRedelegationEntry();
    message.creation_date = object.creation_date ?? "0";
    message.finish_date = object.finish_date ?? "0";
    return message;
  },
};

/** QueryDelegation contains all rpc requests related to direct delegation data */
export interface QueryAccount {
  /** AccountAssets returns an overview of the sum of all balances for a given user. e.g. balance, staking, funding, etc. */
  AccountAssets(request: QueryAccountAssetsRequest): Promise<QueryAccountAssetsResponse>;
  /** AccountFundedList returns all pools the given user has funded into. */
  AccountFundedList(request: QueryAccountFundedListRequest): Promise<QueryAccountFundedListResponse>;
}

export const QueryAccountServiceName = "kyve.query.v1beta1.QueryAccount";
export class QueryAccountClientImpl implements QueryAccount {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryAccountServiceName;
    this.rpc = rpc;
    this.AccountAssets = this.AccountAssets.bind(this);
    this.AccountFundedList = this.AccountFundedList.bind(this);
  }
  AccountAssets(request: QueryAccountAssetsRequest): Promise<QueryAccountAssetsResponse> {
    const data = QueryAccountAssetsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AccountAssets", data);
    return promise.then((data) => QueryAccountAssetsResponse.decode(new BinaryReader(data)));
  }

  AccountFundedList(request: QueryAccountFundedListRequest): Promise<QueryAccountFundedListResponse> {
    const data = QueryAccountFundedListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AccountFundedList", data);
    return promise.then((data) => QueryAccountFundedListResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
