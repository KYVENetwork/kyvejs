// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/query/v1beta1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Validator } from "../../../cosmos/staking/v1beta1/staking";
import { PoolStatus, poolStatusFromJSON, poolStatusToJSON, poolStatusToNumber } from "../../pool/v1beta1/pool";

export const protobufPackage = "kyve.query.v1beta1";

/**
 * BasicPool contains the necessary properties need for a pool
 * to be displayed in the UI
 */
export interface BasicPool {
  /** id is the ID of the pool */
  id: string;
  /** name of the pool */
  name: string;
  /**
   * runtime for the protocol nodes
   * like evm, bitcoin, etc.
   */
  runtime: string;
  /** logo of the pool */
  logo: string;
  /** inflation_share_weight is the base payout for each bundle reward */
  inflation_share_weight: string;
  /** upload_interval is the interval bundles get created */
  upload_interval: string;
  /**
   * total_funds of the pool. If the pool runs
   * out of funds no more bundles will be produced
   */
  total_funds: Coin[];
  /** total_stake of the pool */
  total_stake: string;
  /**
   * status of the pool if pool is able
   * to produce bundles, etc.
   */
  status: PoolStatus;
}

/**
 * FullStaker aggregates information from the staker and its delegators
 * as well as pending queue entries into one object.
 * It contains almost all needed information for a convenient usage
 */
export interface FullStaker {
  /** address of the staker */
  address: string;
  validator?:
    | Validator
    | undefined;
  /**
   * validator_delegators returns the amount of delegators which have delegated
   * into this validator
   */
  validator_delegators: string;
  /**
   * validator_self_delegation returns the amount in $KYVE the validator has
   * personally delegated
   */
  validator_self_delegation: string;
  /**
   * validator_unbonding returns the amount in $KYVE the validator is currently
   * unbonding from his validator
   */
  validator_unbonding: string;
  /**
   * validator_total_pool_stake returns the amount the validator has in total
   * staked in all his pools
   */
  validator_total_pool_stake: string;
  validator_commission_rewards: Coin[];
  /**
   * pools is a list of all pools the staker is currently
   * participating, i.e. allowed to vote and upload data.
   */
  pools: PoolMembership[];
}

/**
 * CommissionChangeEntry shows when the old commission
 * of a staker will change to the new commission
 */
export interface CommissionChangeEntry {
  /**
   * commission is the new commission that will
   * become active once the change-time is over
   */
  commission: string;
  /**
   * creation_date is the UNIX-timestamp (in seconds)
   * of when the entry was created.
   */
  creation_date: string;
}

/**
 * StakeFractionChangeEntry shows when the old stake fraction
 * of a staker will change to the new stake fraction
 */
export interface StakeFractionChangeEntry {
  /**
   * stake_fraction is the new stake_fraction that will
   * become active once the change-time is over
   */
  stake_fraction: string;
  /**
   * creation_date is the UNIX-timestamp (in seconds)
   * of when the entry was created.
   */
  creation_date: string;
}

/**
 * PoolMembership shows in which pool the staker
 * is participating
 */
export interface PoolMembership {
  /** pool contains useful information about the pool */
  pool?:
    | BasicPool
    | undefined;
  /**
   * points indicates if the staker is inactive
   * If the staker misses a vote, a point is added.
   * After 5 points the staker is removed from
   * the stakers set.
   */
  points: string;
  /**
   * is_leaving indicates if a user has scheduled a
   * a PoolLeave entry. After the leave-time is over
   * the staker will no longer participate in that pool
   */
  is_leaving: boolean;
  /**
   * pool address is the address which is authorized to vote
   * and submit bundles. If the server gets compromised
   * the staker can just change the pool address .
   */
  pool_address: string;
  /**
   * balance is the pool address  account balance and indicates
   * whether or not the pool account needs additional funds to
   * pay for gas fees
   */
  balance: string;
  /**
   * commission is the commission the validator has chosen for
   * this specific pool
   */
  commission: string;
  /**
   * pending_commission_change shows if the staker plans
   * to change its commission. Delegators will see a warning in
   * the UI. A Commission change takes some time until
   * the commission is applied. Users have time to redelegate
   * if they not agree with the new commission.
   */
  pending_commission_change?:
    | CommissionChangeEntry
    | undefined;
  /**
   * stake fraction is a percentage the validator has chosen for
   * this pool. It is the fraction of how much of his total stake
   * the validator wants to stake in this specific pool
   */
  stake_fraction: string;
  /**
   * pending_stake_fraction_change shows if the staker plans
   * to change its stake fraction. Delegators will see a warning in
   * the UI. A stake fraction change takes some time until
   * the stake fraction is applied. Users have time to redelegate
   * if they not agree with the new stake fraction.
   */
  pending_stake_fraction_change?:
    | StakeFractionChangeEntry
    | undefined;
  /**
   * pool stake shows the actual amount the validator has staked
   * in this pool. It can be lower than the specified stake fraction
   * because of the max voting power limit
   */
  pool_stake: string;
}

function createBaseBasicPool(): BasicPool {
  return {
    id: "0",
    name: "",
    runtime: "",
    logo: "",
    inflation_share_weight: "",
    upload_interval: "0",
    total_funds: [],
    total_stake: "0",
    status: PoolStatus.POOL_STATUS_UNSPECIFIED,
  };
}

export const BasicPool: MessageFns<BasicPool> = {
  encode(message: BasicPool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.runtime !== "") {
      writer.uint32(26).string(message.runtime);
    }
    if (message.logo !== "") {
      writer.uint32(34).string(message.logo);
    }
    if (message.inflation_share_weight !== "") {
      writer.uint32(42).string(message.inflation_share_weight);
    }
    if (message.upload_interval !== "0") {
      writer.uint32(48).uint64(message.upload_interval);
    }
    for (const v of message.total_funds) {
      Coin.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.total_stake !== "0") {
      writer.uint32(64).uint64(message.total_stake);
    }
    if (message.status !== PoolStatus.POOL_STATUS_UNSPECIFIED) {
      writer.uint32(72).int32(poolStatusToNumber(message.status));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BasicPool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBasicPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.runtime = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.logo = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inflation_share_weight = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.upload_interval = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.total_funds.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.total_stake = reader.uint64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.status = poolStatusFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BasicPool {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      runtime: isSet(object.runtime) ? globalThis.String(object.runtime) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      inflation_share_weight: isSet(object.inflation_share_weight)
        ? globalThis.String(object.inflation_share_weight)
        : "",
      upload_interval: isSet(object.upload_interval) ? globalThis.String(object.upload_interval) : "0",
      total_funds: globalThis.Array.isArray(object?.total_funds)
        ? object.total_funds.map((e: any) => Coin.fromJSON(e))
        : [],
      total_stake: isSet(object.total_stake) ? globalThis.String(object.total_stake) : "0",
      status: isSet(object.status) ? poolStatusFromJSON(object.status) : PoolStatus.POOL_STATUS_UNSPECIFIED,
    };
  },

  toJSON(message: BasicPool): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.runtime !== "") {
      obj.runtime = message.runtime;
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.inflation_share_weight !== "") {
      obj.inflation_share_weight = message.inflation_share_weight;
    }
    if (message.upload_interval !== "0") {
      obj.upload_interval = message.upload_interval;
    }
    if (message.total_funds?.length) {
      obj.total_funds = message.total_funds.map((e) => Coin.toJSON(e));
    }
    if (message.total_stake !== "0") {
      obj.total_stake = message.total_stake;
    }
    if (message.status !== PoolStatus.POOL_STATUS_UNSPECIFIED) {
      obj.status = poolStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BasicPool>, I>>(base?: I): BasicPool {
    return BasicPool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BasicPool>, I>>(object: I): BasicPool {
    const message = createBaseBasicPool();
    message.id = object.id ?? "0";
    message.name = object.name ?? "";
    message.runtime = object.runtime ?? "";
    message.logo = object.logo ?? "";
    message.inflation_share_weight = object.inflation_share_weight ?? "";
    message.upload_interval = object.upload_interval ?? "0";
    message.total_funds = object.total_funds?.map((e) => Coin.fromPartial(e)) || [];
    message.total_stake = object.total_stake ?? "0";
    message.status = object.status ?? PoolStatus.POOL_STATUS_UNSPECIFIED;
    return message;
  },
};

function createBaseFullStaker(): FullStaker {
  return {
    address: "",
    validator: undefined,
    validator_delegators: "0",
    validator_self_delegation: "0",
    validator_unbonding: "0",
    validator_total_pool_stake: "0",
    validator_commission_rewards: [],
    pools: [],
  };
}

export const FullStaker: MessageFns<FullStaker> = {
  encode(message: FullStaker, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(18).fork()).join();
    }
    if (message.validator_delegators !== "0") {
      writer.uint32(24).uint64(message.validator_delegators);
    }
    if (message.validator_self_delegation !== "0") {
      writer.uint32(32).uint64(message.validator_self_delegation);
    }
    if (message.validator_unbonding !== "0") {
      writer.uint32(40).uint64(message.validator_unbonding);
    }
    if (message.validator_total_pool_stake !== "0") {
      writer.uint32(48).uint64(message.validator_total_pool_stake);
    }
    for (const v of message.validator_commission_rewards) {
      Coin.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.pools) {
      PoolMembership.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FullStaker {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFullStaker();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.validator_delegators = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.validator_self_delegation = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.validator_unbonding = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.validator_total_pool_stake = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.validator_commission_rewards.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.pools.push(PoolMembership.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FullStaker {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
      validator_delegators: isSet(object.validator_delegators) ? globalThis.String(object.validator_delegators) : "0",
      validator_self_delegation: isSet(object.validator_self_delegation)
        ? globalThis.String(object.validator_self_delegation)
        : "0",
      validator_unbonding: isSet(object.validator_unbonding) ? globalThis.String(object.validator_unbonding) : "0",
      validator_total_pool_stake: isSet(object.validator_total_pool_stake)
        ? globalThis.String(object.validator_total_pool_stake)
        : "0",
      validator_commission_rewards: globalThis.Array.isArray(object?.validator_commission_rewards)
        ? object.validator_commission_rewards.map((e: any) => Coin.fromJSON(e))
        : [],
      pools: globalThis.Array.isArray(object?.pools) ? object.pools.map((e: any) => PoolMembership.fromJSON(e)) : [],
    };
  },

  toJSON(message: FullStaker): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.validator_delegators !== "0") {
      obj.validator_delegators = message.validator_delegators;
    }
    if (message.validator_self_delegation !== "0") {
      obj.validator_self_delegation = message.validator_self_delegation;
    }
    if (message.validator_unbonding !== "0") {
      obj.validator_unbonding = message.validator_unbonding;
    }
    if (message.validator_total_pool_stake !== "0") {
      obj.validator_total_pool_stake = message.validator_total_pool_stake;
    }
    if (message.validator_commission_rewards?.length) {
      obj.validator_commission_rewards = message.validator_commission_rewards.map((e) => Coin.toJSON(e));
    }
    if (message.pools?.length) {
      obj.pools = message.pools.map((e) => PoolMembership.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FullStaker>, I>>(base?: I): FullStaker {
    return FullStaker.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FullStaker>, I>>(object: I): FullStaker {
    const message = createBaseFullStaker();
    message.address = object.address ?? "";
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    message.validator_delegators = object.validator_delegators ?? "0";
    message.validator_self_delegation = object.validator_self_delegation ?? "0";
    message.validator_unbonding = object.validator_unbonding ?? "0";
    message.validator_total_pool_stake = object.validator_total_pool_stake ?? "0";
    message.validator_commission_rewards = object.validator_commission_rewards?.map((e) => Coin.fromPartial(e)) || [];
    message.pools = object.pools?.map((e) => PoolMembership.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCommissionChangeEntry(): CommissionChangeEntry {
  return { commission: "", creation_date: "0" };
}

export const CommissionChangeEntry: MessageFns<CommissionChangeEntry> = {
  encode(message: CommissionChangeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commission !== "") {
      writer.uint32(10).string(message.commission);
    }
    if (message.creation_date !== "0") {
      writer.uint32(16).int64(message.creation_date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommissionChangeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommissionChangeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commission = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.creation_date = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommissionChangeEntry {
    return {
      commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
      creation_date: isSet(object.creation_date) ? globalThis.String(object.creation_date) : "0",
    };
  },

  toJSON(message: CommissionChangeEntry): unknown {
    const obj: any = {};
    if (message.commission !== "") {
      obj.commission = message.commission;
    }
    if (message.creation_date !== "0") {
      obj.creation_date = message.creation_date;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommissionChangeEntry>, I>>(base?: I): CommissionChangeEntry {
    return CommissionChangeEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommissionChangeEntry>, I>>(object: I): CommissionChangeEntry {
    const message = createBaseCommissionChangeEntry();
    message.commission = object.commission ?? "";
    message.creation_date = object.creation_date ?? "0";
    return message;
  },
};

function createBaseStakeFractionChangeEntry(): StakeFractionChangeEntry {
  return { stake_fraction: "", creation_date: "0" };
}

export const StakeFractionChangeEntry: MessageFns<StakeFractionChangeEntry> = {
  encode(message: StakeFractionChangeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stake_fraction !== "") {
      writer.uint32(10).string(message.stake_fraction);
    }
    if (message.creation_date !== "0") {
      writer.uint32(16).int64(message.creation_date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StakeFractionChangeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStakeFractionChangeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stake_fraction = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.creation_date = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StakeFractionChangeEntry {
    return {
      stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
      creation_date: isSet(object.creation_date) ? globalThis.String(object.creation_date) : "0",
    };
  },

  toJSON(message: StakeFractionChangeEntry): unknown {
    const obj: any = {};
    if (message.stake_fraction !== "") {
      obj.stake_fraction = message.stake_fraction;
    }
    if (message.creation_date !== "0") {
      obj.creation_date = message.creation_date;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StakeFractionChangeEntry>, I>>(base?: I): StakeFractionChangeEntry {
    return StakeFractionChangeEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StakeFractionChangeEntry>, I>>(object: I): StakeFractionChangeEntry {
    const message = createBaseStakeFractionChangeEntry();
    message.stake_fraction = object.stake_fraction ?? "";
    message.creation_date = object.creation_date ?? "0";
    return message;
  },
};

function createBasePoolMembership(): PoolMembership {
  return {
    pool: undefined,
    points: "0",
    is_leaving: false,
    pool_address: "",
    balance: "0",
    commission: "",
    pending_commission_change: undefined,
    stake_fraction: "",
    pending_stake_fraction_change: undefined,
    pool_stake: "0",
  };
}

export const PoolMembership: MessageFns<PoolMembership> = {
  encode(message: PoolMembership, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pool !== undefined) {
      BasicPool.encode(message.pool, writer.uint32(10).fork()).join();
    }
    if (message.points !== "0") {
      writer.uint32(16).uint64(message.points);
    }
    if (message.is_leaving !== false) {
      writer.uint32(24).bool(message.is_leaving);
    }
    if (message.pool_address !== "") {
      writer.uint32(34).string(message.pool_address);
    }
    if (message.balance !== "0") {
      writer.uint32(40).uint64(message.balance);
    }
    if (message.commission !== "") {
      writer.uint32(50).string(message.commission);
    }
    if (message.pending_commission_change !== undefined) {
      CommissionChangeEntry.encode(message.pending_commission_change, writer.uint32(58).fork()).join();
    }
    if (message.stake_fraction !== "") {
      writer.uint32(66).string(message.stake_fraction);
    }
    if (message.pending_stake_fraction_change !== undefined) {
      StakeFractionChangeEntry.encode(message.pending_stake_fraction_change, writer.uint32(74).fork()).join();
    }
    if (message.pool_stake !== "0") {
      writer.uint32(80).uint64(message.pool_stake);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PoolMembership {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoolMembership();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pool = BasicPool.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.points = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.is_leaving = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pool_address = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.balance = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.commission = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pending_commission_change = CommissionChangeEntry.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.stake_fraction = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.pending_stake_fraction_change = StakeFractionChangeEntry.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.pool_stake = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PoolMembership {
    return {
      pool: isSet(object.pool) ? BasicPool.fromJSON(object.pool) : undefined,
      points: isSet(object.points) ? globalThis.String(object.points) : "0",
      is_leaving: isSet(object.is_leaving) ? globalThis.Boolean(object.is_leaving) : false,
      pool_address: isSet(object.pool_address) ? globalThis.String(object.pool_address) : "",
      balance: isSet(object.balance) ? globalThis.String(object.balance) : "0",
      commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
      pending_commission_change: isSet(object.pending_commission_change)
        ? CommissionChangeEntry.fromJSON(object.pending_commission_change)
        : undefined,
      stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
      pending_stake_fraction_change: isSet(object.pending_stake_fraction_change)
        ? StakeFractionChangeEntry.fromJSON(object.pending_stake_fraction_change)
        : undefined,
      pool_stake: isSet(object.pool_stake) ? globalThis.String(object.pool_stake) : "0",
    };
  },

  toJSON(message: PoolMembership): unknown {
    const obj: any = {};
    if (message.pool !== undefined) {
      obj.pool = BasicPool.toJSON(message.pool);
    }
    if (message.points !== "0") {
      obj.points = message.points;
    }
    if (message.is_leaving !== false) {
      obj.is_leaving = message.is_leaving;
    }
    if (message.pool_address !== "") {
      obj.pool_address = message.pool_address;
    }
    if (message.balance !== "0") {
      obj.balance = message.balance;
    }
    if (message.commission !== "") {
      obj.commission = message.commission;
    }
    if (message.pending_commission_change !== undefined) {
      obj.pending_commission_change = CommissionChangeEntry.toJSON(message.pending_commission_change);
    }
    if (message.stake_fraction !== "") {
      obj.stake_fraction = message.stake_fraction;
    }
    if (message.pending_stake_fraction_change !== undefined) {
      obj.pending_stake_fraction_change = StakeFractionChangeEntry.toJSON(message.pending_stake_fraction_change);
    }
    if (message.pool_stake !== "0") {
      obj.pool_stake = message.pool_stake;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PoolMembership>, I>>(base?: I): PoolMembership {
    return PoolMembership.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PoolMembership>, I>>(object: I): PoolMembership {
    const message = createBasePoolMembership();
    message.pool = (object.pool !== undefined && object.pool !== null) ? BasicPool.fromPartial(object.pool) : undefined;
    message.points = object.points ?? "0";
    message.is_leaving = object.is_leaving ?? false;
    message.pool_address = object.pool_address ?? "";
    message.balance = object.balance ?? "0";
    message.commission = object.commission ?? "";
    message.pending_commission_change =
      (object.pending_commission_change !== undefined && object.pending_commission_change !== null)
        ? CommissionChangeEntry.fromPartial(object.pending_commission_change)
        : undefined;
    message.stake_fraction = object.stake_fraction ?? "";
    message.pending_stake_fraction_change =
      (object.pending_stake_fraction_change !== undefined && object.pending_stake_fraction_change !== null)
        ? StakeFractionChangeEntry.fromPartial(object.pending_stake_fraction_change)
        : undefined;
    message.pool_stake = object.pool_stake ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
