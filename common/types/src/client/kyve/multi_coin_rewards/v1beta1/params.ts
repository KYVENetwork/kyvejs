// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/multi_coin_rewards/v1beta1/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "kyve.multi_coin_rewards.v1beta1";

/** Params defines the multi_coin_rewards module parameters. */
export interface Params {
  /**
   * multi_coin_distribution_policy_admin_address specifies an address which is allowed to adjust the weights for
   * the coin redistribution. This address can not drain coins, but only modify the in which pools coins
   * get re-distributed.
   */
  multi_coin_distribution_policy_admin_address: string;
  /** multi_coin_distribution_pending_time ... */
  multi_coin_distribution_pending_time: string;
}

function createBaseParams(): Params {
  return { multi_coin_distribution_policy_admin_address: "", multi_coin_distribution_pending_time: "0" };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.multi_coin_distribution_policy_admin_address !== "") {
      writer.uint32(10).string(message.multi_coin_distribution_policy_admin_address);
    }
    if (message.multi_coin_distribution_pending_time !== "0") {
      writer.uint32(16).uint64(message.multi_coin_distribution_pending_time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.multi_coin_distribution_policy_admin_address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.multi_coin_distribution_pending_time = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      multi_coin_distribution_policy_admin_address: isSet(object.multi_coin_distribution_policy_admin_address)
        ? globalThis.String(object.multi_coin_distribution_policy_admin_address)
        : "",
      multi_coin_distribution_pending_time: isSet(object.multi_coin_distribution_pending_time)
        ? globalThis.String(object.multi_coin_distribution_pending_time)
        : "0",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.multi_coin_distribution_policy_admin_address !== "") {
      obj.multi_coin_distribution_policy_admin_address = message.multi_coin_distribution_policy_admin_address;
    }
    if (message.multi_coin_distribution_pending_time !== "0") {
      obj.multi_coin_distribution_pending_time = message.multi_coin_distribution_pending_time;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.multi_coin_distribution_policy_admin_address = object.multi_coin_distribution_policy_admin_address ?? "";
    message.multi_coin_distribution_pending_time = object.multi_coin_distribution_pending_time ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
