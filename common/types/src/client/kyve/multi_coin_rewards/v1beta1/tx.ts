// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/multi_coin_rewards/v1beta1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { MultiCoinDistributionPolicy } from "./types";

export const protobufPackage = "kyve.multi_coin_rewards.v1beta1";

/** MsgUpdateParams defines a SDK message for updating the module parameters. */
export interface MsgUpdateParams {
  /** authority is the address of the governance account. */
  authority: string;
  /** payload defines the x/multi_coin_rewards parameters to update. */
  payload: string;
}

/** MsgUpdateParamsResponse defines the Msg/UpdateParams response type. */
export interface MsgUpdateParamsResponse {
}

/**
 * MsgEnableMultiCoinReward enables multi-coin rewards for the sender address
 * and claims all current pending rewards.
 */
export interface MsgToggleMultiCoinRewards {
  /** creator ... */
  creator: string;
  /** enabled ... */
  enabled: boolean;
}

/** MsgEnableMultiCoinRewardResponse ... */
export interface MsgToggleMultiCoinRewardsResponse {
}

/**
 * MsgEnableMultiCoinReward enables multi-coin rewards for the sender address
 * and claims all current pending rewards.
 */
export interface MsgSetMultiCoinRewardsDistributionPolicy {
  /** creator ... */
  creator: string;
  /** policy ... */
  policy?: MultiCoinDistributionPolicy | undefined;
}

/** MsgEnableMultiCoinRewardResponse ... */
export interface MsgSetMultiCoinRewardsDistributionPolicyResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", payload: "" };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.payload !== "") {
      writer.uint32(18).string(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.payload = object.payload ?? "";
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgToggleMultiCoinRewards(): MsgToggleMultiCoinRewards {
  return { creator: "", enabled: false };
}

export const MsgToggleMultiCoinRewards: MessageFns<MsgToggleMultiCoinRewards> = {
  encode(message: MsgToggleMultiCoinRewards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.enabled !== false) {
      writer.uint32(16).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgToggleMultiCoinRewards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgToggleMultiCoinRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgToggleMultiCoinRewards {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: MsgToggleMultiCoinRewards): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgToggleMultiCoinRewards>, I>>(base?: I): MsgToggleMultiCoinRewards {
    return MsgToggleMultiCoinRewards.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgToggleMultiCoinRewards>, I>>(object: I): MsgToggleMultiCoinRewards {
    const message = createBaseMsgToggleMultiCoinRewards();
    message.creator = object.creator ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseMsgToggleMultiCoinRewardsResponse(): MsgToggleMultiCoinRewardsResponse {
  return {};
}

export const MsgToggleMultiCoinRewardsResponse: MessageFns<MsgToggleMultiCoinRewardsResponse> = {
  encode(_: MsgToggleMultiCoinRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgToggleMultiCoinRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgToggleMultiCoinRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgToggleMultiCoinRewardsResponse {
    return {};
  },

  toJSON(_: MsgToggleMultiCoinRewardsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgToggleMultiCoinRewardsResponse>, I>>(
    base?: I,
  ): MsgToggleMultiCoinRewardsResponse {
    return MsgToggleMultiCoinRewardsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgToggleMultiCoinRewardsResponse>, I>>(
    _: I,
  ): MsgToggleMultiCoinRewardsResponse {
    const message = createBaseMsgToggleMultiCoinRewardsResponse();
    return message;
  },
};

function createBaseMsgSetMultiCoinRewardsDistributionPolicy(): MsgSetMultiCoinRewardsDistributionPolicy {
  return { creator: "", policy: undefined };
}

export const MsgSetMultiCoinRewardsDistributionPolicy: MessageFns<MsgSetMultiCoinRewardsDistributionPolicy> = {
  encode(message: MsgSetMultiCoinRewardsDistributionPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.policy !== undefined) {
      MultiCoinDistributionPolicy.encode(message.policy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetMultiCoinRewardsDistributionPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMultiCoinRewardsDistributionPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.policy = MultiCoinDistributionPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetMultiCoinRewardsDistributionPolicy {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      policy: isSet(object.policy) ? MultiCoinDistributionPolicy.fromJSON(object.policy) : undefined,
    };
  },

  toJSON(message: MsgSetMultiCoinRewardsDistributionPolicy): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.policy !== undefined) {
      obj.policy = MultiCoinDistributionPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMultiCoinRewardsDistributionPolicy>, I>>(
    base?: I,
  ): MsgSetMultiCoinRewardsDistributionPolicy {
    return MsgSetMultiCoinRewardsDistributionPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMultiCoinRewardsDistributionPolicy>, I>>(
    object: I,
  ): MsgSetMultiCoinRewardsDistributionPolicy {
    const message = createBaseMsgSetMultiCoinRewardsDistributionPolicy();
    message.creator = object.creator ?? "";
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? MultiCoinDistributionPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseMsgSetMultiCoinRewardsDistributionPolicyResponse(): MsgSetMultiCoinRewardsDistributionPolicyResponse {
  return {};
}

export const MsgSetMultiCoinRewardsDistributionPolicyResponse: MessageFns<
  MsgSetMultiCoinRewardsDistributionPolicyResponse
> = {
  encode(_: MsgSetMultiCoinRewardsDistributionPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetMultiCoinRewardsDistributionPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMultiCoinRewardsDistributionPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetMultiCoinRewardsDistributionPolicyResponse {
    return {};
  },

  toJSON(_: MsgSetMultiCoinRewardsDistributionPolicyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMultiCoinRewardsDistributionPolicyResponse>, I>>(
    base?: I,
  ): MsgSetMultiCoinRewardsDistributionPolicyResponse {
    return MsgSetMultiCoinRewardsDistributionPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMultiCoinRewardsDistributionPolicyResponse>, I>>(
    _: I,
  ): MsgSetMultiCoinRewardsDistributionPolicyResponse {
    const message = createBaseMsgSetMultiCoinRewardsDistributionPolicyResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a governance operation for updating the x/multi_coin_rewards module
   * parameters. The authority is hard-coded to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** ToggleMultiCoinRewards ... */
  ToggleMultiCoinRewards(request: MsgToggleMultiCoinRewards): Promise<MsgToggleMultiCoinRewardsResponse>;
  /** SetMultiCoinRewardDistributionPolicy ... */
  SetMultiCoinRewardDistributionPolicy(
    request: MsgSetMultiCoinRewardsDistributionPolicy,
  ): Promise<MsgSetMultiCoinRewardsDistributionPolicyResponse>;
}

export const MsgServiceName = "kyve.multi_coin_rewards.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.ToggleMultiCoinRewards = this.ToggleMultiCoinRewards.bind(this);
    this.SetMultiCoinRewardDistributionPolicy = this.SetMultiCoinRewardDistributionPolicy.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  ToggleMultiCoinRewards(request: MsgToggleMultiCoinRewards): Promise<MsgToggleMultiCoinRewardsResponse> {
    const data = MsgToggleMultiCoinRewards.encode(request).finish();
    const promise = this.rpc.request(this.service, "ToggleMultiCoinRewards", data);
    return promise.then((data) => MsgToggleMultiCoinRewardsResponse.decode(new BinaryReader(data)));
  }

  SetMultiCoinRewardDistributionPolicy(
    request: MsgSetMultiCoinRewardsDistributionPolicy,
  ): Promise<MsgSetMultiCoinRewardsDistributionPolicyResponse> {
    const data = MsgSetMultiCoinRewardsDistributionPolicy.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetMultiCoinRewardDistributionPolicy", data);
    return promise.then((data) => MsgSetMultiCoinRewardsDistributionPolicyResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
