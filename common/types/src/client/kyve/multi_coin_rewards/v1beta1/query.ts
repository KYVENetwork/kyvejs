// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/multi_coin_rewards/v1beta1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "./params";
import { MultiCoinDistributionPolicy } from "./types";

export const protobufPackage = "kyve.multi_coin_rewards.v1beta1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

/** QueryMultiCoinDistributionPolicyRequest ... */
export interface QueryMultiCoinDistributionPolicyRequest {
}

/** QueryMultiCoinDistributionPolicyResponse ... */
export interface QueryMultiCoinDistributionPolicyResponse {
  /** params holds all the parameters of this module. */
  policy?: MultiCoinDistributionPolicy | undefined;
}

/** QueryMultiCoinDistributionPolicyRequest ... */
export interface QueryMultiCoinStatusRequest {
  /** address ... */
  address: string;
}

/** QueryMultiCoinDistributionPolicyResponse ... */
export interface QueryMultiCoinStatusResponse {
  /** enabled ... */
  enabled: boolean;
  /** pending_multi_coin_rewards ... */
  pending_multi_coin_rewards: Coin[];
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryMultiCoinDistributionPolicyRequest(): QueryMultiCoinDistributionPolicyRequest {
  return {};
}

export const QueryMultiCoinDistributionPolicyRequest: MessageFns<QueryMultiCoinDistributionPolicyRequest> = {
  encode(_: QueryMultiCoinDistributionPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMultiCoinDistributionPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMultiCoinDistributionPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryMultiCoinDistributionPolicyRequest {
    return {};
  },

  toJSON(_: QueryMultiCoinDistributionPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMultiCoinDistributionPolicyRequest>, I>>(
    base?: I,
  ): QueryMultiCoinDistributionPolicyRequest {
    return QueryMultiCoinDistributionPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMultiCoinDistributionPolicyRequest>, I>>(
    _: I,
  ): QueryMultiCoinDistributionPolicyRequest {
    const message = createBaseQueryMultiCoinDistributionPolicyRequest();
    return message;
  },
};

function createBaseQueryMultiCoinDistributionPolicyResponse(): QueryMultiCoinDistributionPolicyResponse {
  return { policy: undefined };
}

export const QueryMultiCoinDistributionPolicyResponse: MessageFns<QueryMultiCoinDistributionPolicyResponse> = {
  encode(message: QueryMultiCoinDistributionPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      MultiCoinDistributionPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMultiCoinDistributionPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMultiCoinDistributionPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policy = MultiCoinDistributionPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMultiCoinDistributionPolicyResponse {
    return { policy: isSet(object.policy) ? MultiCoinDistributionPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: QueryMultiCoinDistributionPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = MultiCoinDistributionPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMultiCoinDistributionPolicyResponse>, I>>(
    base?: I,
  ): QueryMultiCoinDistributionPolicyResponse {
    return QueryMultiCoinDistributionPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMultiCoinDistributionPolicyResponse>, I>>(
    object: I,
  ): QueryMultiCoinDistributionPolicyResponse {
    const message = createBaseQueryMultiCoinDistributionPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? MultiCoinDistributionPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseQueryMultiCoinStatusRequest(): QueryMultiCoinStatusRequest {
  return { address: "" };
}

export const QueryMultiCoinStatusRequest: MessageFns<QueryMultiCoinStatusRequest> = {
  encode(message: QueryMultiCoinStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMultiCoinStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMultiCoinStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMultiCoinStatusRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryMultiCoinStatusRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMultiCoinStatusRequest>, I>>(base?: I): QueryMultiCoinStatusRequest {
    return QueryMultiCoinStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMultiCoinStatusRequest>, I>>(object: I): QueryMultiCoinStatusRequest {
    const message = createBaseQueryMultiCoinStatusRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryMultiCoinStatusResponse(): QueryMultiCoinStatusResponse {
  return { enabled: false, pending_multi_coin_rewards: [] };
}

export const QueryMultiCoinStatusResponse: MessageFns<QueryMultiCoinStatusResponse> = {
  encode(message: QueryMultiCoinStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    for (const v of message.pending_multi_coin_rewards) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMultiCoinStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMultiCoinStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pending_multi_coin_rewards.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMultiCoinStatusResponse {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      pending_multi_coin_rewards: globalThis.Array.isArray(object?.pending_multi_coin_rewards)
        ? object.pending_multi_coin_rewards.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryMultiCoinStatusResponse): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.pending_multi_coin_rewards?.length) {
      obj.pending_multi_coin_rewards = message.pending_multi_coin_rewards.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMultiCoinStatusResponse>, I>>(base?: I): QueryMultiCoinStatusResponse {
    return QueryMultiCoinStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMultiCoinStatusResponse>, I>>(object: I): QueryMultiCoinStatusResponse {
    const message = createBaseQueryMultiCoinStatusResponse();
    message.enabled = object.enabled ?? false;
    message.pending_multi_coin_rewards = object.pending_multi_coin_rewards?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** policy, multi-coin-enabled, multi-coin-status/address: {enabled true false, pending rewards} */
  MultiCoinDistributionPolicyQuery(
    request: QueryMultiCoinDistributionPolicyRequest,
  ): Promise<QueryMultiCoinDistributionPolicyResponse>;
  /** MultiCoinStatus ... */
  MultiCoinStatus(request: QueryMultiCoinStatusRequest): Promise<QueryMultiCoinStatusResponse>;
}

export const QueryServiceName = "kyve.multi_coin_rewards.v1beta1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.MultiCoinDistributionPolicyQuery = this.MultiCoinDistributionPolicyQuery.bind(this);
    this.MultiCoinStatus = this.MultiCoinStatus.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  MultiCoinDistributionPolicyQuery(
    request: QueryMultiCoinDistributionPolicyRequest,
  ): Promise<QueryMultiCoinDistributionPolicyResponse> {
    const data = QueryMultiCoinDistributionPolicyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MultiCoinDistributionPolicyQuery", data);
    return promise.then((data) => QueryMultiCoinDistributionPolicyResponse.decode(new BinaryReader(data)));
  }

  MultiCoinStatus(request: QueryMultiCoinStatusRequest): Promise<QueryMultiCoinStatusResponse> {
    const data = QueryMultiCoinStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MultiCoinStatus", data);
    return promise.then((data) => QueryMultiCoinStatusResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
