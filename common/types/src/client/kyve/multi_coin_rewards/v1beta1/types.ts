// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/multi_coin_rewards/v1beta1/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "kyve.multi_coin_rewards.v1beta1";

/** UnbondingState stores the state for the unbonding of stakes and delegations. */
export interface QueueState {
  /**
   * low_index is the tail of the queue. It is the
   * oldest entry in the queue. If this entry isn't
   * due, non of the other entries is.
   */
  low_index: string;
  /**
   * high_index is the head of the queue. New entries
   * are added to the top.
   */
  high_index: string;
}

/** MultiCoinPendingRewardsEntry ... */
export interface MultiCoinPendingRewardsEntry {
  /**
   * index is needed for the queue-algorithm which
   * processes the commission changes
   */
  index: string;
  /** address ... */
  address: string;
  /** rewards ... */
  rewards: Coin[];
  creation_date: string;
}

/** MultiCoinDistributionPolicy ... */
export interface MultiCoinDistributionPolicy {
  entries: MultiCoinDistributionDenomEntry[];
}

/** MultiCoinDistributionDenomEntry ... */
export interface MultiCoinDistributionDenomEntry {
  denom: string;
  pool_weights: MultiCoinDistributionPoolWeightEntry[];
}

/** MultiCoinDistributionPoolWeightEntry ... */
export interface MultiCoinDistributionPoolWeightEntry {
  pool_id: string;
  weight: string;
}

function createBaseQueueState(): QueueState {
  return { low_index: "0", high_index: "0" };
}

export const QueueState: MessageFns<QueueState> = {
  encode(message: QueueState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.low_index !== "0") {
      writer.uint32(8).uint64(message.low_index);
    }
    if (message.high_index !== "0") {
      writer.uint32(16).uint64(message.high_index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueueState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueueState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.low_index = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.high_index = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueueState {
    return {
      low_index: isSet(object.low_index) ? globalThis.String(object.low_index) : "0",
      high_index: isSet(object.high_index) ? globalThis.String(object.high_index) : "0",
    };
  },

  toJSON(message: QueueState): unknown {
    const obj: any = {};
    if (message.low_index !== "0") {
      obj.low_index = message.low_index;
    }
    if (message.high_index !== "0") {
      obj.high_index = message.high_index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueueState>, I>>(base?: I): QueueState {
    return QueueState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueueState>, I>>(object: I): QueueState {
    const message = createBaseQueueState();
    message.low_index = object.low_index ?? "0";
    message.high_index = object.high_index ?? "0";
    return message;
  },
};

function createBaseMultiCoinPendingRewardsEntry(): MultiCoinPendingRewardsEntry {
  return { index: "0", address: "", rewards: [], creation_date: "0" };
}

export const MultiCoinPendingRewardsEntry: MessageFns<MultiCoinPendingRewardsEntry> = {
  encode(message: MultiCoinPendingRewardsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "0") {
      writer.uint32(8).uint64(message.index);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    for (const v of message.rewards) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.creation_date !== "0") {
      writer.uint32(32).int64(message.creation_date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiCoinPendingRewardsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiCoinPendingRewardsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewards.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.creation_date = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiCoinPendingRewardsEntry {
    return {
      index: isSet(object.index) ? globalThis.String(object.index) : "0",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      rewards: globalThis.Array.isArray(object?.rewards) ? object.rewards.map((e: any) => Coin.fromJSON(e)) : [],
      creation_date: isSet(object.creation_date) ? globalThis.String(object.creation_date) : "0",
    };
  },

  toJSON(message: MultiCoinPendingRewardsEntry): unknown {
    const obj: any = {};
    if (message.index !== "0") {
      obj.index = message.index;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.rewards?.length) {
      obj.rewards = message.rewards.map((e) => Coin.toJSON(e));
    }
    if (message.creation_date !== "0") {
      obj.creation_date = message.creation_date;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiCoinPendingRewardsEntry>, I>>(base?: I): MultiCoinPendingRewardsEntry {
    return MultiCoinPendingRewardsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiCoinPendingRewardsEntry>, I>>(object: I): MultiCoinPendingRewardsEntry {
    const message = createBaseMultiCoinPendingRewardsEntry();
    message.index = object.index ?? "0";
    message.address = object.address ?? "";
    message.rewards = object.rewards?.map((e) => Coin.fromPartial(e)) || [];
    message.creation_date = object.creation_date ?? "0";
    return message;
  },
};

function createBaseMultiCoinDistributionPolicy(): MultiCoinDistributionPolicy {
  return { entries: [] };
}

export const MultiCoinDistributionPolicy: MessageFns<MultiCoinDistributionPolicy> = {
  encode(message: MultiCoinDistributionPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      MultiCoinDistributionDenomEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiCoinDistributionPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiCoinDistributionPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(MultiCoinDistributionDenomEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiCoinDistributionPolicy {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => MultiCoinDistributionDenomEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MultiCoinDistributionPolicy): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => MultiCoinDistributionDenomEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiCoinDistributionPolicy>, I>>(base?: I): MultiCoinDistributionPolicy {
    return MultiCoinDistributionPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiCoinDistributionPolicy>, I>>(object: I): MultiCoinDistributionPolicy {
    const message = createBaseMultiCoinDistributionPolicy();
    message.entries = object.entries?.map((e) => MultiCoinDistributionDenomEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMultiCoinDistributionDenomEntry(): MultiCoinDistributionDenomEntry {
  return { denom: "", pool_weights: [] };
}

export const MultiCoinDistributionDenomEntry: MessageFns<MultiCoinDistributionDenomEntry> = {
  encode(message: MultiCoinDistributionDenomEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    for (const v of message.pool_weights) {
      MultiCoinDistributionPoolWeightEntry.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiCoinDistributionDenomEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiCoinDistributionDenomEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pool_weights.push(MultiCoinDistributionPoolWeightEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiCoinDistributionDenomEntry {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      pool_weights: globalThis.Array.isArray(object?.pool_weights)
        ? object.pool_weights.map((e: any) => MultiCoinDistributionPoolWeightEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MultiCoinDistributionDenomEntry): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.pool_weights?.length) {
      obj.pool_weights = message.pool_weights.map((e) => MultiCoinDistributionPoolWeightEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiCoinDistributionDenomEntry>, I>>(base?: I): MultiCoinDistributionDenomEntry {
    return MultiCoinDistributionDenomEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiCoinDistributionDenomEntry>, I>>(
    object: I,
  ): MultiCoinDistributionDenomEntry {
    const message = createBaseMultiCoinDistributionDenomEntry();
    message.denom = object.denom ?? "";
    message.pool_weights = object.pool_weights?.map((e) => MultiCoinDistributionPoolWeightEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMultiCoinDistributionPoolWeightEntry(): MultiCoinDistributionPoolWeightEntry {
  return { pool_id: "0", weight: "" };
}

export const MultiCoinDistributionPoolWeightEntry: MessageFns<MultiCoinDistributionPoolWeightEntry> = {
  encode(message: MultiCoinDistributionPoolWeightEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pool_id !== "0") {
      writer.uint32(8).uint64(message.pool_id);
    }
    if (message.weight !== "") {
      writer.uint32(18).string(message.weight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiCoinDistributionPoolWeightEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiCoinDistributionPoolWeightEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pool_id = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weight = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiCoinDistributionPoolWeightEntry {
    return {
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
      weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
    };
  },

  toJSON(message: MultiCoinDistributionPoolWeightEntry): unknown {
    const obj: any = {};
    if (message.pool_id !== "0") {
      obj.pool_id = message.pool_id;
    }
    if (message.weight !== "") {
      obj.weight = message.weight;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiCoinDistributionPoolWeightEntry>, I>>(
    base?: I,
  ): MultiCoinDistributionPoolWeightEntry {
    return MultiCoinDistributionPoolWeightEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiCoinDistributionPoolWeightEntry>, I>>(
    object: I,
  ): MultiCoinDistributionPoolWeightEntry {
    const message = createBaseMultiCoinDistributionPoolWeightEntry();
    message.pool_id = object.pool_id ?? "0";
    message.weight = object.weight ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
