// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/bundles/v1beta1/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "kyve.bundles.v1beta1";

/** StorageCost defines the cost for storage providers */
export interface StorageCost {
  /** storage_provider_id is a unique identifier for each storage provider, such as Arweave, Irys, Filecoin, etc. */
  storage_provider_id: number;
  /** cost is the amount in USD to store one byte on the storage provider. This value should be kept up-to-date. */
  cost: string;
}

/** Params defines the bundles module parameters. */
export interface Params {
  /** upload_timeout ... */
  upload_timeout: string;
  /** storage_costs ... */
  storage_costs: StorageCost[];
  /** network_fee ... */
  network_fee: string;
  /** max_points ... */
  max_points: string;
}

function createBaseStorageCost(): StorageCost {
  return { storage_provider_id: 0, cost: "" };
}

export const StorageCost: MessageFns<StorageCost> = {
  encode(message: StorageCost, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storage_provider_id !== 0) {
      writer.uint32(8).uint32(message.storage_provider_id);
    }
    if (message.cost !== "") {
      writer.uint32(18).string(message.cost);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StorageCost {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStorageCost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.storage_provider_id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cost = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StorageCost {
    return {
      storage_provider_id: isSet(object.storage_provider_id) ? globalThis.Number(object.storage_provider_id) : 0,
      cost: isSet(object.cost) ? globalThis.String(object.cost) : "",
    };
  },

  toJSON(message: StorageCost): unknown {
    const obj: any = {};
    if (message.storage_provider_id !== 0) {
      obj.storage_provider_id = Math.round(message.storage_provider_id);
    }
    if (message.cost !== "") {
      obj.cost = message.cost;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StorageCost>, I>>(base?: I): StorageCost {
    return StorageCost.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StorageCost>, I>>(object: I): StorageCost {
    const message = createBaseStorageCost();
    message.storage_provider_id = object.storage_provider_id ?? 0;
    message.cost = object.cost ?? "";
    return message;
  },
};

function createBaseParams(): Params {
  return { upload_timeout: "0", storage_costs: [], network_fee: "", max_points: "0" };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.upload_timeout !== "0") {
      writer.uint32(8).uint64(message.upload_timeout);
    }
    for (const v of message.storage_costs) {
      StorageCost.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.network_fee !== "") {
      writer.uint32(26).string(message.network_fee);
    }
    if (message.max_points !== "0") {
      writer.uint32(32).uint64(message.max_points);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.upload_timeout = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.storage_costs.push(StorageCost.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.network_fee = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.max_points = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      upload_timeout: isSet(object.upload_timeout) ? globalThis.String(object.upload_timeout) : "0",
      storage_costs: globalThis.Array.isArray(object?.storage_costs)
        ? object.storage_costs.map((e: any) => StorageCost.fromJSON(e))
        : [],
      network_fee: isSet(object.network_fee) ? globalThis.String(object.network_fee) : "",
      max_points: isSet(object.max_points) ? globalThis.String(object.max_points) : "0",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.upload_timeout !== "0") {
      obj.upload_timeout = message.upload_timeout;
    }
    if (message.storage_costs?.length) {
      obj.storage_costs = message.storage_costs.map((e) => StorageCost.toJSON(e));
    }
    if (message.network_fee !== "") {
      obj.network_fee = message.network_fee;
    }
    if (message.max_points !== "0") {
      obj.max_points = message.max_points;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.upload_timeout = object.upload_timeout ?? "0";
    message.storage_costs = object.storage_costs?.map((e) => StorageCost.fromPartial(e)) || [];
    message.network_fee = object.network_fee ?? "";
    message.max_points = object.max_points ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
