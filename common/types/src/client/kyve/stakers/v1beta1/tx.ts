// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/stakers/v1beta1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "kyve.stakers.v1beta1";

/** MsgUpdateCommission ... // TODO: create v1 types and rename new to MsgUpdatePoolCommission */
export interface MsgUpdateCommission {
  /** creator ... */
  creator: string;
  /** pool_id ... */
  pool_id: string;
  /** commission ... */
  commission: string;
}

/** MsgUpdateCommissionResponse ... */
export interface MsgUpdateCommissionResponse {
}

/** MsgUpdateStakeFraction ... */
export interface MsgUpdateStakeFraction {
  /** creator ... */
  creator: string;
  /** pool_id ... */
  pool_id: string;
  /** commission ... */
  stake_fraction: string;
}

/** MsgUpdateStakeFractionResponse ... */
export interface MsgUpdateStakeFractionResponse {
}

/** MsgJoinPool ... // TODO: create v1 types */
export interface MsgJoinPool {
  /** creator ... */
  creator: string;
  /** pool_id ... */
  pool_id: string;
  /** pool_address ... */
  pool_address: string;
  /** amount ... */
  amount: string;
  /** commission ... */
  commission: string;
  /** stake_fraction ... */
  stake_fraction: string;
}

/** MsgJoinPoolResponse ... */
export interface MsgJoinPoolResponse {
}

/** MsgLeavePool ... */
export interface MsgLeavePool {
  /** creator ... */
  creator: string;
  /** pool_id ... */
  pool_id: string;
}

/** MsgReactivateStakerResponse ... */
export interface MsgLeavePoolResponse {
}

/** MsgUpdateParams defines a SDK message for updating the module parameters. */
export interface MsgUpdateParams {
  /** authority is the address of the governance account. */
  authority: string;
  /** payload defines the x/stakers parameters to update. */
  payload: string;
}

/** MsgUpdateParamsResponse defines the Msg/UpdateParams response type. */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgUpdateCommission(): MsgUpdateCommission {
  return { creator: "", pool_id: "0", commission: "" };
}

export const MsgUpdateCommission: MessageFns<MsgUpdateCommission> = {
  encode(message: MsgUpdateCommission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.pool_id !== "0") {
      writer.uint32(16).uint64(message.pool_id);
    }
    if (message.commission !== "") {
      writer.uint32(26).string(message.commission);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateCommission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateCommission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pool_id = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.commission = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateCommission {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
      commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
    };
  },

  toJSON(message: MsgUpdateCommission): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.pool_id !== "0") {
      obj.pool_id = message.pool_id;
    }
    if (message.commission !== "") {
      obj.commission = message.commission;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateCommission>, I>>(base?: I): MsgUpdateCommission {
    return MsgUpdateCommission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateCommission>, I>>(object: I): MsgUpdateCommission {
    const message = createBaseMsgUpdateCommission();
    message.creator = object.creator ?? "";
    message.pool_id = object.pool_id ?? "0";
    message.commission = object.commission ?? "";
    return message;
  },
};

function createBaseMsgUpdateCommissionResponse(): MsgUpdateCommissionResponse {
  return {};
}

export const MsgUpdateCommissionResponse: MessageFns<MsgUpdateCommissionResponse> = {
  encode(_: MsgUpdateCommissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateCommissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateCommissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateCommissionResponse {
    return {};
  },

  toJSON(_: MsgUpdateCommissionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateCommissionResponse>, I>>(base?: I): MsgUpdateCommissionResponse {
    return MsgUpdateCommissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateCommissionResponse>, I>>(_: I): MsgUpdateCommissionResponse {
    const message = createBaseMsgUpdateCommissionResponse();
    return message;
  },
};

function createBaseMsgUpdateStakeFraction(): MsgUpdateStakeFraction {
  return { creator: "", pool_id: "0", stake_fraction: "" };
}

export const MsgUpdateStakeFraction: MessageFns<MsgUpdateStakeFraction> = {
  encode(message: MsgUpdateStakeFraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.pool_id !== "0") {
      writer.uint32(16).uint64(message.pool_id);
    }
    if (message.stake_fraction !== "") {
      writer.uint32(26).string(message.stake_fraction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateStakeFraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateStakeFraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pool_id = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stake_fraction = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateStakeFraction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
      stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
    };
  },

  toJSON(message: MsgUpdateStakeFraction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.pool_id !== "0") {
      obj.pool_id = message.pool_id;
    }
    if (message.stake_fraction !== "") {
      obj.stake_fraction = message.stake_fraction;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateStakeFraction>, I>>(base?: I): MsgUpdateStakeFraction {
    return MsgUpdateStakeFraction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateStakeFraction>, I>>(object: I): MsgUpdateStakeFraction {
    const message = createBaseMsgUpdateStakeFraction();
    message.creator = object.creator ?? "";
    message.pool_id = object.pool_id ?? "0";
    message.stake_fraction = object.stake_fraction ?? "";
    return message;
  },
};

function createBaseMsgUpdateStakeFractionResponse(): MsgUpdateStakeFractionResponse {
  return {};
}

export const MsgUpdateStakeFractionResponse: MessageFns<MsgUpdateStakeFractionResponse> = {
  encode(_: MsgUpdateStakeFractionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateStakeFractionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateStakeFractionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateStakeFractionResponse {
    return {};
  },

  toJSON(_: MsgUpdateStakeFractionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateStakeFractionResponse>, I>>(base?: I): MsgUpdateStakeFractionResponse {
    return MsgUpdateStakeFractionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateStakeFractionResponse>, I>>(_: I): MsgUpdateStakeFractionResponse {
    const message = createBaseMsgUpdateStakeFractionResponse();
    return message;
  },
};

function createBaseMsgJoinPool(): MsgJoinPool {
  return { creator: "", pool_id: "0", pool_address: "", amount: "0", commission: "", stake_fraction: "" };
}

export const MsgJoinPool: MessageFns<MsgJoinPool> = {
  encode(message: MsgJoinPool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.pool_id !== "0") {
      writer.uint32(16).uint64(message.pool_id);
    }
    if (message.pool_address !== "") {
      writer.uint32(26).string(message.pool_address);
    }
    if (message.amount !== "0") {
      writer.uint32(32).uint64(message.amount);
    }
    if (message.commission !== "") {
      writer.uint32(42).string(message.commission);
    }
    if (message.stake_fraction !== "") {
      writer.uint32(50).string(message.stake_fraction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgJoinPool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgJoinPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pool_id = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pool_address = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.commission = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.stake_fraction = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgJoinPool {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
      pool_address: isSet(object.pool_address) ? globalThis.String(object.pool_address) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "0",
      commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
      stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
    };
  },

  toJSON(message: MsgJoinPool): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.pool_id !== "0") {
      obj.pool_id = message.pool_id;
    }
    if (message.pool_address !== "") {
      obj.pool_address = message.pool_address;
    }
    if (message.amount !== "0") {
      obj.amount = message.amount;
    }
    if (message.commission !== "") {
      obj.commission = message.commission;
    }
    if (message.stake_fraction !== "") {
      obj.stake_fraction = message.stake_fraction;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgJoinPool>, I>>(base?: I): MsgJoinPool {
    return MsgJoinPool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgJoinPool>, I>>(object: I): MsgJoinPool {
    const message = createBaseMsgJoinPool();
    message.creator = object.creator ?? "";
    message.pool_id = object.pool_id ?? "0";
    message.pool_address = object.pool_address ?? "";
    message.amount = object.amount ?? "0";
    message.commission = object.commission ?? "";
    message.stake_fraction = object.stake_fraction ?? "";
    return message;
  },
};

function createBaseMsgJoinPoolResponse(): MsgJoinPoolResponse {
  return {};
}

export const MsgJoinPoolResponse: MessageFns<MsgJoinPoolResponse> = {
  encode(_: MsgJoinPoolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgJoinPoolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgJoinPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgJoinPoolResponse {
    return {};
  },

  toJSON(_: MsgJoinPoolResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgJoinPoolResponse>, I>>(base?: I): MsgJoinPoolResponse {
    return MsgJoinPoolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgJoinPoolResponse>, I>>(_: I): MsgJoinPoolResponse {
    const message = createBaseMsgJoinPoolResponse();
    return message;
  },
};

function createBaseMsgLeavePool(): MsgLeavePool {
  return { creator: "", pool_id: "0" };
}

export const MsgLeavePool: MessageFns<MsgLeavePool> = {
  encode(message: MsgLeavePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.pool_id !== "0") {
      writer.uint32(16).uint64(message.pool_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLeavePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLeavePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pool_id = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLeavePool {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
    };
  },

  toJSON(message: MsgLeavePool): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.pool_id !== "0") {
      obj.pool_id = message.pool_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLeavePool>, I>>(base?: I): MsgLeavePool {
    return MsgLeavePool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLeavePool>, I>>(object: I): MsgLeavePool {
    const message = createBaseMsgLeavePool();
    message.creator = object.creator ?? "";
    message.pool_id = object.pool_id ?? "0";
    return message;
  },
};

function createBaseMsgLeavePoolResponse(): MsgLeavePoolResponse {
  return {};
}

export const MsgLeavePoolResponse: MessageFns<MsgLeavePoolResponse> = {
  encode(_: MsgLeavePoolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLeavePoolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLeavePoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgLeavePoolResponse {
    return {};
  },

  toJSON(_: MsgLeavePoolResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLeavePoolResponse>, I>>(base?: I): MsgLeavePoolResponse {
    return MsgLeavePoolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLeavePoolResponse>, I>>(_: I): MsgLeavePoolResponse {
    const message = createBaseMsgLeavePoolResponse();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", payload: "" };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.payload !== "") {
      writer.uint32(18).string(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.payload = object.payload ?? "";
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /** JoinPool ... */
  JoinPool(request: MsgJoinPool): Promise<MsgJoinPoolResponse>;
  /** LeavePool ... */
  LeavePool(request: MsgLeavePool): Promise<MsgLeavePoolResponse>;
  /** UpdateCommission ... */
  UpdateCommission(request: MsgUpdateCommission): Promise<MsgUpdateCommissionResponse>;
  /** UpdateStakeFraction ... */
  UpdateStakeFraction(request: MsgUpdateStakeFraction): Promise<MsgUpdateStakeFractionResponse>;
  /**
   * UpdateParams defines a governance operation for updating the x/stakers module
   * parameters. The authority is hard-coded to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "kyve.stakers.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.JoinPool = this.JoinPool.bind(this);
    this.LeavePool = this.LeavePool.bind(this);
    this.UpdateCommission = this.UpdateCommission.bind(this);
    this.UpdateStakeFraction = this.UpdateStakeFraction.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  JoinPool(request: MsgJoinPool): Promise<MsgJoinPoolResponse> {
    const data = MsgJoinPool.encode(request).finish();
    const promise = this.rpc.request(this.service, "JoinPool", data);
    return promise.then((data) => MsgJoinPoolResponse.decode(new BinaryReader(data)));
  }

  LeavePool(request: MsgLeavePool): Promise<MsgLeavePoolResponse> {
    const data = MsgLeavePool.encode(request).finish();
    const promise = this.rpc.request(this.service, "LeavePool", data);
    return promise.then((data) => MsgLeavePoolResponse.decode(new BinaryReader(data)));
  }

  UpdateCommission(request: MsgUpdateCommission): Promise<MsgUpdateCommissionResponse> {
    const data = MsgUpdateCommission.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateCommission", data);
    return promise.then((data) => MsgUpdateCommissionResponse.decode(new BinaryReader(data)));
  }

  UpdateStakeFraction(request: MsgUpdateStakeFraction): Promise<MsgUpdateStakeFractionResponse> {
    const data = MsgUpdateStakeFraction.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateStakeFraction", data);
    return promise.then((data) => MsgUpdateStakeFractionResponse.decode(new BinaryReader(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
