# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: kyve/bundles/v1beta1/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class VoteType(betterproto.Enum):
    """VoteType ..."""

    VOTE_TYPE_UNSPECIFIED = 0
    """VOTE_TYPE_UNSPECIFIED ..."""

    VOTE_TYPE_VALID = 1
    """VOTE_TYPE_VALID ..."""

    VOTE_TYPE_INVALID = 2
    """VOTE_TYPE_INVALID ..."""

    VOTE_TYPE_ABSTAIN = 3
    """VOTE_TYPE_ABSTAIN ..."""


@dataclass(eq=False, repr=False)
class MsgSubmitBundleProposal(betterproto.Message):
    """
    MsgSubmitBundleProposal defines a SDK message for submitting a bundle
    proposal.
    """

    creator: str = betterproto.string_field(1)
    """creator ..."""

    staker: str = betterproto.string_field(2)
    """staker ..."""

    pool_id: int = betterproto.uint64_field(3)
    """pool_id ..."""

    storage_id: str = betterproto.string_field(4)
    """storage_id ..."""

    data_size: int = betterproto.uint64_field(5)
    """data_size ..."""

    data_hash: str = betterproto.string_field(6)
    """data_hash ..."""

    from_index: int = betterproto.uint64_field(7)
    """from_index ..."""

    bundle_size: int = betterproto.uint64_field(8)
    """bundle_size ..."""

    from_key: str = betterproto.string_field(9)
    """from_key"""

    to_key: str = betterproto.string_field(10)
    """to_key ..."""

    bundle_summary: str = betterproto.string_field(11)
    """bundle_summary ..."""


@dataclass(eq=False, repr=False)
class MsgSubmitBundleProposalResponse(betterproto.Message):
    """
    MsgSubmitBundleProposalResponse defines the Msg/SubmitBundleProposal
    response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgVoteBundleProposal(betterproto.Message):
    """
    MsgVoteBundleProposal defines a SDK message for voting on a bundle
    proposal.
    """

    creator: str = betterproto.string_field(1)
    """creator ..."""

    staker: str = betterproto.string_field(2)
    """staker ..."""

    pool_id: int = betterproto.uint64_field(3)
    """id ..."""

    storage_id: str = betterproto.string_field(4)
    """storage_id ..."""

    vote: "VoteType" = betterproto.enum_field(5)
    """vote ..."""


@dataclass(eq=False, repr=False)
class MsgVoteBundleProposalResponse(betterproto.Message):
    """
    MsgVoteBundleProposalResponse defines the Msg/VoteBundleProposal response
    type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgClaimUploaderRole(betterproto.Message):
    """
    MsgClaimUploaderRole defines a SDK message for claiming the uploader role.
    """

    creator: str = betterproto.string_field(1)
    """creator ..."""

    staker: str = betterproto.string_field(2)
    """staker ..."""

    pool_id: int = betterproto.uint64_field(3)
    """id ..."""


@dataclass(eq=False, repr=False)
class MsgClaimUploaderRoleResponse(betterproto.Message):
    """
    MsgClaimUploaderRoleResponse defines the Msg/ClaimUploaderRole response
    type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgSkipUploaderRole(betterproto.Message):
    """
    MsgSubmitBundleProposal defines a SDK message for submitting a bundle
    proposal.
    """

    creator: str = betterproto.string_field(1)
    """creator ..."""

    staker: str = betterproto.string_field(2)
    """staker ..."""

    pool_id: int = betterproto.uint64_field(3)
    """pool_id ..."""

    from_index: int = betterproto.uint64_field(4)
    """from_index ..."""


@dataclass(eq=False, repr=False)
class MsgSkipUploaderRoleResponse(betterproto.Message):
    """
    MsgSubmitBundleProposalResponse defines the Msg/SubmitBundleProposal
    response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams defines a SDK message for updating the module parameters.
    """

    authority: str = betterproto.string_field(1)
    """authority is the address of the governance account."""

    payload: str = betterproto.string_field(2)
    """payload defines the x/bundles parameters to update."""


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    """MsgUpdateParamsResponse defines the Msg/UpdateParams response type."""

    pass


class MsgStub(betterproto.ServiceStub):
    async def submit_bundle_proposal(
        self,
        msg_submit_bundle_proposal: "MsgSubmitBundleProposal",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSubmitBundleProposalResponse":
        return await self._unary_unary(
            "/kyve.bundles.v1beta1.Msg/SubmitBundleProposal",
            msg_submit_bundle_proposal,
            MsgSubmitBundleProposalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vote_bundle_proposal(
        self,
        msg_vote_bundle_proposal: "MsgVoteBundleProposal",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgVoteBundleProposalResponse":
        return await self._unary_unary(
            "/kyve.bundles.v1beta1.Msg/VoteBundleProposal",
            msg_vote_bundle_proposal,
            MsgVoteBundleProposalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def claim_uploader_role(
        self,
        msg_claim_uploader_role: "MsgClaimUploaderRole",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgClaimUploaderRoleResponse":
        return await self._unary_unary(
            "/kyve.bundles.v1beta1.Msg/ClaimUploaderRole",
            msg_claim_uploader_role,
            MsgClaimUploaderRoleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def skip_uploader_role(
        self,
        msg_skip_uploader_role: "MsgSkipUploaderRole",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSkipUploaderRoleResponse":
        return await self._unary_unary(
            "/kyve.bundles.v1beta1.Msg/SkipUploaderRole",
            msg_skip_uploader_role,
            MsgSkipUploaderRoleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/kyve.bundles.v1beta1.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def submit_bundle_proposal(
        self, msg_submit_bundle_proposal: "MsgSubmitBundleProposal"
    ) -> "MsgSubmitBundleProposalResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def vote_bundle_proposal(
        self, msg_vote_bundle_proposal: "MsgVoteBundleProposal"
    ) -> "MsgVoteBundleProposalResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claim_uploader_role(
        self, msg_claim_uploader_role: "MsgClaimUploaderRole"
    ) -> "MsgClaimUploaderRoleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def skip_uploader_role(
        self, msg_skip_uploader_role: "MsgSkipUploaderRole"
    ) -> "MsgSkipUploaderRoleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_submit_bundle_proposal(
        self,
        stream: "grpclib.server.Stream[MsgSubmitBundleProposal, MsgSubmitBundleProposalResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_bundle_proposal(request)
        await stream.send_message(response)

    async def __rpc_vote_bundle_proposal(
        self,
        stream: "grpclib.server.Stream[MsgVoteBundleProposal, MsgVoteBundleProposalResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.vote_bundle_proposal(request)
        await stream.send_message(response)

    async def __rpc_claim_uploader_role(
        self,
        stream: "grpclib.server.Stream[MsgClaimUploaderRole, MsgClaimUploaderRoleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.claim_uploader_role(request)
        await stream.send_message(response)

    async def __rpc_skip_uploader_role(
        self,
        stream: "grpclib.server.Stream[MsgSkipUploaderRole, MsgSkipUploaderRoleResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.skip_uploader_role(request)
        await stream.send_message(response)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kyve.bundles.v1beta1.Msg/SubmitBundleProposal": grpclib.const.Handler(
                self.__rpc_submit_bundle_proposal,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSubmitBundleProposal,
                MsgSubmitBundleProposalResponse,
            ),
            "/kyve.bundles.v1beta1.Msg/VoteBundleProposal": grpclib.const.Handler(
                self.__rpc_vote_bundle_proposal,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgVoteBundleProposal,
                MsgVoteBundleProposalResponse,
            ),
            "/kyve.bundles.v1beta1.Msg/ClaimUploaderRole": grpclib.const.Handler(
                self.__rpc_claim_uploader_role,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgClaimUploaderRole,
                MsgClaimUploaderRoleResponse,
            ),
            "/kyve.bundles.v1beta1.Msg/SkipUploaderRole": grpclib.const.Handler(
                self.__rpc_skip_uploader_role,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSkipUploaderRole,
                MsgSkipUploaderRoleResponse,
            ),
            "/kyve.bundles.v1beta1.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
        }
