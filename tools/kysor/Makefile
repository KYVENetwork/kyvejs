# Shortcut targets
default: docker-image

###############################################################################
# Both native and cross architecture builds are supported.
# The target architecture is select by setting the ARCH variable.
# When ARCH is undefined it is set to the detected host architecture.
# When ARCH differs from the host architecture a crossbuild will be performed.
ARCHES = amd64 arm64

GOOS ?= $(shell uname | tr '[:upper:]' '[:lower:]')

# BUILDARCH is the host architecture
# ARCH is the target architecture
# we need to keep track of them separately
BUILDARCH ?= $(shell uname -m)

# canonicalized names for host architecture
ifeq ($(BUILDARCH),aarch64)
	BUILDARCH=arm64
endif
ifeq ($(BUILDARCH),x86_64)
	BUILDARCH=amd64
endif

# unless otherwise set, I am building for my own architecture, i.e. not cross-compiling
ARCH ?= $(BUILDARCH)

###############################################################################

GO_VERSION := $(shell go version | cut -c 14- | cut -d' ' -f1 | cut -d'.' -f1,2)

commit=$(shell git rev-parse HEAD)

ldflags := $(LDFLAGS)
ldflags += -X github.com/KYVENetwork/kyvejs/tools/kysor/cmd.Version=$(VERSION) \
		  -X github.com/KYVENetwork/kyvejs/tools/kysor/cmd.Commit=$(commit)
ldflags := $(strip $(ldflags))

BUILD_FLAGS := -ldflags '$(ldflags)'

###############################################################################

PLATFORMS=linux darwin
VERSION ?= latest
DOCKER_IMAGE_NAME ?= kysor
BINARY_NAME ?= kysor
CGO_ENABLED=0

###############################################################################
###                                 Checks                                  ###
###############################################################################

ensure_version:
ifneq ($(GO_VERSION),1.21)
	$(error ‚ùå  Please run Go v1.21.x..)
endif

###############################################################################
###                          Formatting & Linting                           ###
###############################################################################

gofumpt_cmd=mvdan.cc/gofumpt
golangci_lint_cmd=github.com/golangci/golangci-lint/cmd/golangci-lint

format:
	@echo "üìù Running formatter..."
	@go run $(gofumpt_cmd) -l -w -e .
	@echo "‚úÖ Completed formatting!"

lint:
	@echo "üìù Running linter..."
	@go run $(golangci_lint_cmd) run --timeout=10m  --skip-dirs templates --allow-parallel-runners
	@echo "‚úÖ Completed linting!"

###############################################################################
###  						    Binary building  						    ###
###############################################################################

build: ensure_version
	@echo "üèóÔ∏è  Building binary..."
	go build -o build/$(BINARY_NAME) .
	@echo "‚úÖ Completed binary build!"

install: ensure_version
	@echo "üèóÔ∏è  Installing binary..."
	go install .
	@echo "‚úÖ Completed binary install!"

release: ensure_version
	@rm -rf release
	@mkdir -p release

	@for platform in $(PLATFORMS); do \
		for arch in $(ARCHES); do \
			echo "üèóÔ∏è  Building for $$platform-$$arch..."; \
			GOOS=$$platform GOARCH=$$arch go build -o release/$(BINARY_NAME)-$$platform-$$arch $(BUILD_FLAGS) .; \
		done; \
	done

###############################################################################
### 							 	Docker 							 		###
###############################################################################

docker-image:
	@echo "üèóÔ∏è  Building docker image..."
	DOCKER_BUILDKIT=1 docker build --platform linux/$(ARCH) -t $(DOCKER_IMAGE_NAME):$(VERSION) .
	@echo "‚úÖ Completed docker image build!"

docker-run:
	docker run -it --rm $(DOCKER_IMAGE_NAME):$(VERSION)
